{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOa3k259l9hgfDSu84gUDuo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"kSigOFNrPBs8"},"outputs":[],"source":["\n","import sqlite3\n","import csv\n","import datetime\n","import zlib\n","\n","def convert_coretime_to_readable(timestamp):\n","     # Mac Absolute Time (CoreServices Timestamp)는 2001년 1월 1일 기준\n","    base_date = datetime.datetime(2001, 1, 1)\n","\n","    # timedelta 객체를 사용해 초를 추가\n","    dt_object = base_date + datetime.timedelta(seconds=timestamp)\n","\n","    # 원하는 포맷으로 datetime 객체를 문자열로 변환\n","    readable_time = dt_object.strftime('%Y-%m-%d %H:%M:%S') + \" (UTC+0)\"\n","\n","    return readable_time\n","\n","def convert_hex_to_korean(blob_data):\n","    hex_data = ''.join([f\"{byte:02x}\" for byte in blob_data])\n","    byte_data = bytes.fromhex(hex_data)\n","\n","    decompressed_data = zlib.decompress(byte_data, 16+zlib.MAX_WBITS)\n","\n","    pattern_behind = b'\\x1a\\x10\\n\\x04\\x08'\n","    idx = decompressed_data.find(pattern_behind)\n","\n","    if idx != -1:\n","        decompressed_data = decompressed_data[:idx]\n","\n","    korean_data = []\n","    i = 0\n","    while i < len(decompressed_data):\n","        found = False\n","        for size in range(4, 0, -1):\n","            try:\n","                chunk = decompressed_data[i:i+size]\n","                decoded = chunk.decode('utf-8')\n","                if decoded:\n","                    korean_data.append(decoded)\n","                    i += size\n","                    found = True\n","                    break\n","            except UnicodeDecodeError:\n","                continue\n","\n","        if not found:\n","            i +=1\n","\n","    return ''.join(korean_data)\n","\n","def sqlite_to_csv(database, file_name):\n","    conn = sqlite3.connect(database)\n","    cursor = conn.cursor()\n","\n","    cursor.execute(f\"SELECT ZICCLOUDSYNCINGOBJECT.ZCREATIONDATE3, ZMODIFICATIONDATE1, ZSNIPPET, ZTITLE1, ZICNOTEDATA.ZDATA\\nFROM ZICCLOUDSYNCINGOBJECT, ZICNOTEDATA\\nWHERE ZICCLOUDSYNCINGOBJECT.Z_PK = ZICNOTEDATA.ZNOTE;\")\n","    rows = cursor.fetchall()\n","\n","    column_names = ['created_time', 'last_modified_time', 'snippet', 'title', 'note_data']\n","\n","    converted_rows = []\n","    for row in rows:\n","        if row[0] is None:\n","            converted_creation_date = \"Empty\"\n","        else:\n","          converted_creation_date = convert_coretime_to_readable(row[0])\n","\n","        if row[1] is None:\n","          converted_modified_date = \"Empty\"\n","        else:\n","          converted_modified_date = convert_coretime_to_readable(row[1])\n","\n","        if row[4] is None:\n","            readable_hex_data = \"Empty\"\n","        else:\n","            readable_hex_data = convert_hex_to_korean(row[4])\n","        converted_row = (converted_creation_date, converted_modified_date, row[2], row[3], readable_hex_data)\n","        converted_rows.append(converted_row)\n","\n","    with open(file_name, 'w', newline='') as csv_file:\n","        csv_writer = csv.writer(csv_file)\n","        csv_writer = csv.writer(csv_file, escapechar='\\\\')\n","        csv_writer.writerow(column_names)\n","        csv_writer.writerows(converted_rows)\n","\n","    conn.close()\n","\n","hex_data = \"/content/NoteStore.sqlite\"\n","file_name = \"/content/NoteStore.csv\"\n","sqlite_to_csv(hex_data, file_name)"]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":215},"id":"AGC7qzxdxYyr","executionInfo":{"status":"error","timestamp":1695451488307,"user_tz":-540,"elapsed":8,"user":{"displayName":"[2반]김민수_1343","userId":"01728524521313545148"}},"outputId":"a2f85c85-b16a-42b7-d57c-9792cc950df0"},"execution_count":null,"outputs":[{"output_type":"error","ename":"error","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31merror\u001b[0m                                     Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-fd5fc39e15a3>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mbyte_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfromhex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhex_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mdecompressed_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecompress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbyte_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m16\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mzlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMAX_WBITS\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31merror\u001b[0m: Error -3 while decompressing data: incorrect header check"]}]}]}